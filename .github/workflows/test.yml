name: Test Taskfiles

on:
  push:
    paths:
      - '.taskfiles/**'
      - '.github/workflows/test.yml'
  pull_request:
    paths:
      - '.taskfiles/**'
      - '.github/workflows/test.yml'

jobs:
  test-main:
    runs-on: ubuntu-latest
    env:
      SHELL: /bin/bash
      SHELL_RC: ${{ github.workspace }}/.bashrc
      TASK_BIN: /root/.local/bin/task
    steps:
      - uses: actions/checkout@v4

      - name: Install Task
        run: |
          go-task/task info checking GitHub for latest tag
          curl -fsSL https://raw.githubusercontent.com/go-task/task/main/install-task.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Check Task version
        run: $TASK_BIN --version

      - name: Validate main Taskfile syntax
        run: $TASK_BIN --dry

      - name: List available tasks
        run: $TASK_BIN --list

  test-taskfiles:
    needs: test-main
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        taskfile: ${{ fromJSON(steps.set-matrix.outputs.taskfiles) }}
    env:
      SHELL: /bin/bash
      SHELL_RC: ${{ github.workspace }}/.bashrc
      TASK_BIN: /root/.local/bin/task
    steps:
      - uses: actions/checkout@v4

      - name: Install Task
        run: |
          go-task/task info checking GitHub for latest tag
          curl -fsSL https://raw.githubusercontent.com/go-task/task/main/install-task.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Create shell config
        run: touch "$SHELL_RC"

      - name: Test ${{ matrix.taskfile }} taskfile
        run: |
          set -e
          TASKFILE=".taskfiles/${{ matrix.taskfile }}/Taskfile.yml"
          echo "Testing $TASKFILE..."
          
          # Validate syntax
          $TASK_BIN --taskfile "$TASKFILE" --dry || {
            echo "Error: Syntax validation failed for $TASKFILE"
            exit 1
          }
          
          # List available tasks
          echo "Available tasks in $TASKFILE:"
          $TASK_BIN --taskfile "$TASKFILE" --list
          
          # Test each task with --dry
          TASKS=$($TASK_BIN --taskfile "$TASKFILE" --list | grep -v "Available tasks" | grep "^* " | cut -d' ' -f2 | cut -d':' -f1 | sort -u)
          for task in $TASKS; do
            echo "Testing task: $task"
            if ! $TASK_BIN --taskfile "$TASKFILE" "$task" --dry; then
              echo "Error: Task '$task' failed dry run in $TASKFILE"
              exit 1
            fi
          done

  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      taskfiles: ${{ steps.get-taskfiles.outputs.list }}
    steps:
      - uses: actions/checkout@v4
      - id: get-taskfiles
        run: |
          TASKFILES=$(ls -1 .taskfiles | jq -R -s -c 'split("\n")[:-1]')
          echo "list=$TASKFILES" >> $GITHUB_OUTPUT
