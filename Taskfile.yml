# yaml-language-server: $schema=https://taskfile.dev/schema.json
---
version: "3"

set: [pipefail]
shopt: [globstar]

includes:
  act: .taskfiles/act
  aws: .taskfiles/aws
  bun: .taskfiles/bun
  digitalocean: .taskfiles/digitalocean
  direnv: .taskfiles/direnv
  docker: .taskfiles/docker
  fnm: .taskfiles/fnm
  hadolint: .taskfiles/hadolint
  helm: .taskfiles/helm
  jq: .taskfiles/jq
  k3s: .taskfiles/k3s
  mix: .taskfiles/mix
  node: .taskfiles/node
  pnpm: .taskfiles/pnpm
  python3: .taskfiles/python3
  rclone: .taskfiles/rclone
  terraform: .taskfiles/terraform
  uv: .taskfiles/uv

vars:
  TIMESTAMP:
    sh: date +%Y%m%d_%H%M%S
  LOG_DIR: .logs
  PID_DIR: .pid
  FAIL_FAST: '{{default "false" .FAIL_FAST}}'

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list

  noop:
    internal: true
    cmd: noop() { :; }

  test:
    desc: "Run tests using act"
    summary: |
      Run tests using act.
      
      Options:
        FAIL_FAST=true  # Stop on first failure
      
      Example:
        task test                  # Run all tests
        task test FAIL_FAST=true  # Run all tests, stop on first failure
    deps:
      - task: _install:act
      - task: _install:jq
      - task: _ensure_log_dir
    cmds:
      - |
        echo "Starting tests with FAIL_FAST={{.FAIL_FAST}}"
        echo "Log file: {{.LOG_DIR}}/test_all_{{.TIMESTAMP}}.log"
        act push -j test-all -P ubuntu-latest=ghcr.io/catthehacker/ubuntu:act-latest 2>&1 | tee {{.LOG_DIR}}/test_all_{{.TIMESTAMP}}.log

  test:one:
    desc: "Test a specific taskfile"
    summary: |
      Test a specific taskfile using act.
      
      Options:
        FAIL_FAST=true  # Stop on first failure
      
      Example:
        task test:one -- docker                  # Test .taskfiles/docker/Taskfile.yml
        task test:one -- aws FAIL_FAST=true     # Test .taskfiles/aws/Taskfile.yml, stop on first failure
    deps:
      - task: _install:act
      - task: _install:jq
      - task: _ensure_log_dir
    vars:
      TASKFILE: '{{default "" .CLI_ARGS}}'
    preconditions:
      - sh: test -n "{{.TASKFILE}}"
        msg: "Please specify a taskfile name (without path or extension)"
      - sh: test -f ".taskfiles/{{.TASKFILE}}/Taskfile.yml"
        msg: "Taskfile .taskfiles/{{.TASKFILE}}/Taskfile.yml does not exist"
    cmds:
      - |
        echo "Starting test for {{.TASKFILE}} with FAIL_FAST={{.FAIL_FAST}}"
        echo "Log file: {{.LOG_DIR}}/test_{{.TASKFILE}}_{{.TIMESTAMP}}.log"
        act push -j test-one --env TASKFILE="{{.TASKFILE}}" -P ubuntu-latest=ghcr.io/catthehacker/ubuntu:act-latest 2>&1 | tee {{.LOG_DIR}}/test_{{.TASKFILE}}_{{.TIMESTAMP}}.log

  test:status:
    desc: "Check status of running tests"
    deps:
      - task: _ensure_dirs
    cmds:
      - |
        for pid_file in {{.PID_DIR}}/test_*.pid; do
          if [ -f "$pid_file" ]; then
            pid=$(cat "$pid_file")
            if ps -p "$pid" > /dev/null; then
              echo "Test $(basename "$pid_file" .pid) is still running (PID: $pid)"
            else
              echo "Test $(basename "$pid_file" .pid) has finished"
              rm "$pid_file"
            fi
          fi
        done

  _ensure_dirs:
    desc: "Ensure required directories exist"
    internal: true
    cmds:
      - mkdir -p {{.LOG_DIR}}
      - mkdir -p {{.PID_DIR}}

  _ensure_log_dir:
    desc: "Ensure log directory exists"
    internal: true
    cmds:
      - mkdir -p {{.LOG_DIR}}

  _install:act:
    desc: "Install act"
    internal: true
    vars:
      LATEST_VERSION:
        sh: curl -s https://api.github.com/repos/nektos/act/releases/latest | jq -r '.tag_name | ltrimstr("v")'
      DOWNLOAD_URL: "https://github.com/nektos/act/releases/download/v{{.LATEST_VERSION}}/act_Linux_x86_64.tar.gz"
    run: once
    status:
      - command -v act >/dev/null 2>&1
    cmds:
      - curl -sLO "{{.DOWNLOAD_URL}}"
      - tar xf act_Linux_x86_64.tar.gz
      - sudo mv act /usr/local/bin/
      - sudo chown root:root /usr/local/bin/act
      - sudo chmod 755 /usr/local/bin/act
      - act --version
      - defer: rm -f act_Linux_x86_64.tar.gz

  _install:expect:
    desc: "Install expect package for unbuffer command"
    internal: true
    run: once
    status:
      - command -v unbuffer >/dev/null 2>&1
    cmds:
      - sudo apt-get update
      - sudo apt-get install -y expect
      - which unbuffer

  _install:jq:
    desc: "Install jq"
    internal: true
    run: once
    status:
      - command -v jq >/dev/null 2>&1
    cmds:
      - sudo apt-get update
      - sudo apt-get install -y jq
      - jq --version
