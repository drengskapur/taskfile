# yaml-language-server: $schema=https://taskfile.dev/schema.json
---
version: "3"

vars:
  METADATA: |
    {
      "description": "Elixir Mix Build Tool",
      "category": "Development",
      "homepage": "https://elixir-lang.org/",
      "platforms": ["linux", "darwin"],
      "architectures": ["amd64", "arm64"]
    }
  OS:
    sh: uname -s | tr '[:upper:]' '[:lower:]'
  ARCH:
    sh: |
      case "$(uname -m)" in
        x86_64) echo "amd64" ;;
        aarch64) echo "arm64" ;;
        *) echo "unsupported" ;;
      esac
  HOME:
    sh: echo $HOME

tasks:
  default:
    deps: 
      - task: install

  install:deps:
    internal: true
    cmds:
      - |
        if ! command -v jq >/dev/null 2>&1; then
          sudo apt-get update && sudo apt-get install -y jq curl
        fi

  install:
    desc: "Install Erlang and Elixir"
    deps: 
      - task: install:deps
      - task: erlang-install
      - task: elixir-install
    preconditions:
      - sh: test "{{OS}}" = "linux" -o "{{OS}}" = "darwin"
        msg: "This task only supports Linux and macOS"
      - sh: test "{{ARCH}}" = "amd64" -o "{{ARCH}}" = "arm64"
        msg: "This task only supports amd64 and arm64 architectures"
    status:
      - command -v mix >/dev/null 2>&1
    cmds:
      - mix local.hex --force
      - mix local.rebar --force

  erlang-install:
    desc: "Install Erlang"
    internal: true
    vars:
      LATEST_OTP_VERSION:
        sh: curl -s https://api.github.com/repos/erlang/otp/releases | jq -r '.[0] | .tag_name' | awk -F'-' '{print $2}'
      LATEST_OTP_MAJOR_VERSION:
        sh: echo "{{.LATEST_OTP_VERSION}}" | awk -F'.' '{print $1}'
      OTP_PATH: "export PATH={{.HOME}}/.elixir-install/installs/otp/{{.LATEST_OTP_VERSION}}/bin:$PATH"
    run: once
    status:
      - command -v "{{.HOME}}/.elixir-install/installs/otp/{{.LATEST_OTP_VERSION}}/bin/erl"
    cmds:
      - curl -fsSLO https://raw.githubusercontent.com/elixir-lang/elixir-lang.github.com/main/install.sh
      - defer: rm -f install.sh
      - chmod +x install.sh
      - ./install.sh otp@latest
      - |
        if ! grep -q "{{.OTP_PATH}}" "{{.HOME}}/.bashrc"; then
          echo '{{.OTP_PATH}}' >> "{{.HOME}}/.bashrc"
          export PATH={{.HOME}}/.elixir-install/installs/otp/{{.LATEST_OTP_VERSION}}/bin:$PATH
        fi

  elixir-install:
    desc: "Install Elixir"
    internal: true
    deps:
      - task: erlang-install
    vars:
      LATEST_ELIXIR_VERSION:
        sh: curl -s https://api.github.com/repos/elixir-lang/elixir/releases/latest | jq -r '.tag_name | ltrimstr("v")'
      ELIXIR_PATH: "export PATH={{.HOME}}/.elixir-install/installs/elixir/{{.LATEST_ELIXIR_VERSION}}/bin:$PATH"
    run: once
    status:
      - command -v "{{.HOME}}/.elixir-install/installs/elixir/{{.LATEST_ELIXIR_VERSION}}/bin/elixir"
    cmds:
      - curl -fsSLO https://raw.githubusercontent.com/elixir-lang/elixir-lang.github.com/main/install.sh
      - defer: rm -f install.sh
      - chmod +x install.sh
      - ./install.sh elixir@latest
      - |
        if ! grep -q "{{.ELIXIR_PATH}}" "{{.HOME}}/.bashrc"; then
          echo '{{.ELIXIR_PATH}}' >> "{{.HOME}}/.bashrc"
          export PATH={{.HOME}}/.elixir-install/installs/elixir/{{.LATEST_ELIXIR_VERSION}}/bin:$PATH
        fi

  verify:
    desc: "Verify mix installation"
    cmds:
      - mix --version

  update:
    desc: "Update Erlang and Elixir"
    deps: 
      - task: erlang-update
      - task: elixir-update
    cmds:
      - mix local.hex --force
      - mix local.rebar --force

  erlang-update:
    desc: "Update Erlang"
    internal: true
    vars:
      LATEST_OTP_VERSION:
        sh: curl -s https://api.github.com/repos/erlang/otp/releases | jq -r '.[0] | .tag_name' | awk -F'-' '{print $2}'
      LATEST_OTP_MAJOR_VERSION:
        sh: echo "{{.LATEST_OTP_VERSION}}" | awk -F'.' '{print $1}'
      OTP_PATH: "export PATH={{.HOME}}/.elixir-install/installs/otp/{{.LATEST_OTP_VERSION}}/bin:$PATH"
    run: once
    status:
      - command -v "{{.HOME}}/.elixir-install/installs/otp/{{.LATEST_OTP_VERSION}}/bin/erl"
    cmds:
      - curl -fsSLO https://raw.githubusercontent.com/elixir-lang/elixir-lang.github.com/main/install.sh
      - defer: rm -f install.sh
      - chmod +x install.sh
      - ./install.sh otp@latest
      - |
        if ! grep -q "{{.OTP_PATH}}" "{{.HOME}}/.bashrc"; then
          echo '{{.OTP_PATH}}' >> "{{.HOME}}/.bashrc"
          export PATH={{.HOME}}/.elixir-install/installs/otp/{{.LATEST_OTP_VERSION}}/bin:$PATH
        fi

  elixir-update:
    desc: "Update Elixir"
    internal: true
    deps:
      - task: erlang-update
    vars:
      LATEST_ELIXIR_VERSION:
        sh: curl -s https://api.github.com/repos/elixir-lang/elixir/releases/latest | jq -r '.tag_name | ltrimstr("v")'
      LATEST_OTP_MAJOR_VERSION:
        sh: echo "{{erlang-update.LATEST_OTP_VERSION}}" | awk -F'.' '{print $1}'
      ELIXIR_PATH: "export PATH={{.HOME}}/.elixir-install/installs/elixir/{{.LATEST_ELIXIR_VERSION}}-otp-{{.LATEST_OTP_MAJOR_VERSION}}/bin:$PATH"
    run: once
    status:
      - command -v "{{.HOME}}/.elixir-install/installs/elixir/{{.LATEST_ELIXIR_VERSION}}-otp-{{.LATEST_OTP_MAJOR_VERSION}}/bin/elixir"
    cmds:
      - curl -fsSLO https://raw.githubusercontent.com/elixir-lang/elixir-lang.github.com/main/install.sh
      - defer: rm -f install.sh
      - chmod +x install.sh
      - ./install.sh elixir@latest
      - |
        if ! grep -q "{{.ELIXIR_PATH}}" "{{.HOME}}/.bashrc"; then
          echo '{{.ELIXIR_PATH}}' >> "{{.HOME}}/.bashrc"
          export PATH={{.HOME}}/.elixir-install/installs/elixir/{{.LATEST_ELIXIR_VERSION}}-otp-{{.LATEST_OTP_MAJOR_VERSION}}/bin:$PATH
        fi
